import os
import tempfile
import zipfile
from fastapi import APIRouter
from pydantic import BaseModel
from app.routes.usmca import generate_certificate
from app.routes.risk import calculate_risk
from openai import OpenAI
from fpdf import FPDF

router = APIRouter()
openai_client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


class WorkflowRequest(BaseModel):
    shipment_id: str
    description: str
    exporter_name: str
    importer_name: str
    producer_name: str
    hs_code: str
    country_of_origin: str
    certifier_name: str
    certifier_signature: str
    certifier_date: str


class WorkflowResponse(BaseModel):
    usmca_status: str
    hts_code: str
    documents_zip: str
    risk_score: int
    issues: list[str]


async def generate_hts_code(description: str) -> dict:
    """
    Call OpenAI to get HTS/HS code and explanation
    """
    prompt = f"Suggest HTS code for this product: {description}. Give code only."
    response = openai_client.chat.completions.create(
        model="gpt-4", messages=[{"role": "user", "content": prompt}], temperature=0
    )
    code = response.choices[0].message.content.strip()
    return {"hts_code": code, "explanation": "Generated by AI"}


def generate_invoice_pdf(shipment_id: str, description: str) -> str:
    """
    Generate simple commercial invoice PDF
    """
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, f"Commercial Invoice - Shipment {shipment_id}", ln=True)
    pdf.cell(0, 10, f"Description: {description}", ln=True)
    tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(tmp_file.name)
    return tmp_file.name


def generate_usmca_pdf(data: dict) -> str:
    """
    Generate simple USMCA Certificate PDF
    """
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, f"USMCA Certificate - Shipment {data['exporter_name']}", ln=True)
    for key, value in data.items():
        pdf.cell(0, 10, f"{key}: {value}", ln=True)
    tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(tmp_file.name)
    return tmp_file.name


def create_zip(files: list[str], shipment_id: str) -> str:
    """
    Create ZIP archive of given files
    """
    tmp_zip = tempfile.NamedTemporaryFile(delete=False, suffix=".zip")
    with zipfile.ZipFile(tmp_zip.name, "w") as zipf:
        for f in files:
            zipf.write(f, arcname=os.path.basename(f))
    return tmp_zip.name


@router.post("/process-shipment", response_model=WorkflowResponse)
async def process_shipment(request: WorkflowRequest):
    """
    Full workflow: USMCA + HTS + Documents + Risk
    """
    # 1. USMCA PDF
    usmca_data = request.dict()
    usmca_status = "USMCA generated"
    usmca_pdf = generate_usmca_pdf(usmca_data)

    # 2. HTS code via OpenAI
    hts_result = await generate_hts_code(request.description)
    hts_code = hts_result["hts_code"]

    # 3. Commercial invoice PDF
    invoice_pdf = generate_invoice_pdf(request.shipment_id, request.description)

    # 4. ZIP all documents
    zip_file = create_zip([invoice_pdf, usmca_pdf], request.shipment_id)

    # 5. Risk scoring
    risk_response = await calculate_risk.__wrapped__(
        type(
            "Req",
            (),
            {
                "shipment_id": request.shipment_id,
                "hts_code": hts_code,
                "usmca_complete": True,
            },
        )()
    )

    return {
        "usmca_status": usmca_status,
        "hts_code": hts_code,
        "documents_zip": zip_file,
        "risk_score": risk_response["risk_score"],
        "issues": risk_response["issues"],
    }
